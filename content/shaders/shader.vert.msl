#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Global
{
    float4x4 viewProjectionMat;
    float4x4 invViewMat;
    float4x4 invProjectionMat;
};

struct InstanceData
{
    float4x4 modelMat;
    float4x4 normalMat;
};

struct type_StructuredBuffer_InstanceData
{
    InstanceData _m0[1];
};

struct main0_out
{
    float4 out_var_TEXCOORD0 [[user(locn0)]];
    float2 out_var_TEXCOORD1 [[user(locn1)]];
    float3 out_var_TEXCOORD2 [[user(locn2)]];
    float3 out_var_TEXCOORD3 [[user(locn3)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 in_var_TEXCOORD0 [[attribute(0)]];
    float4 in_var_TEXCOORD1 [[attribute(1)]];
    float2 in_var_TEXCOORD2 [[attribute(2)]];
    float3 in_var_TEXCOORD3 [[attribute(3)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant type_Global& Global [[buffer(0)]], const device type_StructuredBuffer_InstanceData& instances [[buffer(1)]], uint gl_InstanceIndex [[instance_id]])
{
    main0_out out = {};
    float4 _56 = instances._m0[gl_InstanceIndex].modelMat * float4(in.in_var_TEXCOORD0, 1.0);
    out.gl_Position = Global.viewProjectionMat * _56;
    out.out_var_TEXCOORD0 = in.in_var_TEXCOORD1;
    out.out_var_TEXCOORD1 = in.in_var_TEXCOORD2;
    out.out_var_TEXCOORD2 = _56.xyz;
    out.out_var_TEXCOORD3 = fast::normalize((instances._m0[gl_InstanceIndex].normalMat * float4(in.in_var_TEXCOORD3, 0.0)).xyz);
    return out;
}

