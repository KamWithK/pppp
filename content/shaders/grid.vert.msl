#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct type_Global
{
    float4x4 viewProjectionMat;
    float4x4 invViewMat;
    float4x4 invProjectionMat;
};

constant spvUnsafeArray<float2, 4> _36 = spvUnsafeArray<float2, 4>({ float2(-1.0), float2(1.0, -1.0), float2(-1.0, 1.0), float2(1.0) });

struct main0_out
{
    float3 out_var_TEXCOORD0 [[user(locn0)]];
    float3 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant type_Global& Global [[buffer(0)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    float4 _43 = float4(_36[gl_VertexIndex], 0.0, 1.0);
    float4 _49 = Global.invViewMat * (Global.invProjectionMat * _43);
    float4 _56 = Global.invViewMat * (Global.invProjectionMat * float4(_36[gl_VertexIndex], 1.0, 1.0));
    out.gl_Position = _43;
    out.out_var_TEXCOORD0 = _49.xyz / float3(_49.w);
    out.out_var_TEXCOORD1 = _56.xyz / float3(_56.w);
    return out;
}

